@&#MAIN-TITLE@&#Boundary recovery for 3D Delaunay triangulation

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We minimize the number of locked points in the boundary recovery process.


                        
                        
                           
                           A LP technique is employed to ensure the success of Steiner point relocation.


                        
                        
                           
                           The proposed method produced better results than popular commercial software.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Boundary recovery

Fully constrained Delaunay triangulation

Linear programming

Sequence for removal of Steiner points

@&#ABSTRACT@&#


               
               
                  New ideas are presented in this paper for the boundary recovery of 3D Delaunay triangulation. Fully constrained Delaunay triangulations in terms of geometrical and topological integrities on all boundary edges and facets are required in many applications, such as meshing by components, fluid–structure interactions, parallel mesh generation, local remeshing and interface problems. The geometry of boundary edges and facets can be recovered by the introduction of Steiner points. However, for a fully constrained Delaunay triangulation, these Steiner points have to be removed or repositioned towards the interior of the domain to restore the topological integrity of the boundary edges and the facets. It is found that Steiner points on edges could be removed more systematically following a specific sequence in an alternative manner rather than a random selection commonly adopted in practice; whereas for Steiner points on a facet, a weight on the Steiner point adjacency would lead to an optimal order to facilitate their removal. A linear programming technique is also employed to determine the feasible region for the relocation of Steiner points in the interior of the domain. Work examples and industrial applications with details in the boundary recovery are presented to illustrate how the algorithm works on objects with difficult boundary conditions.
               
            

@&#INTRODUCTION@&#

Efficient and robust automatic mesh generation plays a significant role in computational science and engineering [1–4]. For automatic mesh generation over complex domains, unstructured tetrahedron meshing is widely employed due to its inherent theoretical and implementation merits. Basic meshing algorithms such as Advancing-front [5,6], Octree [7] and Delaunay triangulation [8–12] have been proposed and implemented over the last three decades. Among these methods, Delaunay triangulation is the most popular and well studied. While the 2D Delaunay triangulation method is mature and fully investigated, in three dimensions, there are still a number of difficulties including the boundary recovery problem.

Taking the triangular surface mesh as input, boundary recovery requests all triangles on the input surface mesh be preserved without introducing Steiner points on the boundary. The integrity of the boundary (both geometry and topology) is crucial in meshing by components, parallel mesh generation, partial remeshing and multi-interface problems. With the development of the finite element method and its applications, how to generate a tetrahedral mesh with an integral boundary is increasingly important [13–17].

Generally, the existing boundary recovery approaches can be grouped into two categories: (1) local mesh reconnection and (2) introduction of Steiner points. In the first approach, no Steiner point will exist in the final tetrahedron mesh. However, there is no theoretical basis for the success of such methods due to the existence of Schönhardt configuration. In the second approach, Steiner points are introduced to achieve boundary recovery. Although they could recover the geometry of the missing quantities, as how to remove the non-positive tetrahedral elements so created systematically to ensure topological integrity is still an open issue.

As no Steiner points are inserted in the final mesh, approaches by local mesh reconnection attract interest of many researchers. Weatherill and Hassan [18] split the constrained boundary by inserting Steiner points on edges and facets, then suppressed the inserted points by locally remeshing tetrahedra linked to them. However, the remeshing routine could not guarantee a valid boundary-recovered topological structure even though it exists. Liu et al. [16] employed an exhaustive method named small polyhedron reconnection (SPR) to achieve the boundary recovery. For a small polyhedron with no more than 20 triangular facets, SPR evaluates all possible topological structures to detect if the missing quantities could be recovered in one of the configurations. Ghadyani et al. [17] carved out a hole in the vicinity of missing boundary facets, and the hole and missing boundary facets formed a polyhedron, which is to be meshed by a method known as LAST RESORT.

With the help of Steiner points, missing edges and facets could be recovered. An edge is represented as broken line segments separated by Steiner points, and facets are represented by a concatenation of sub-triangles supported on Steiner points. Such meshes are known as semi-constrained Delaunay triangulation; and if topological integrity of boundary edges and facets are not required, the boundary recovery process can stop at this point. However, if a fully constrained Delaunay triangulation including topological integrity is required, all Steiner points have to be removed or repositioned towards the interior of the domain. George et al. [13] improved their previous work [19] to propose a method to mesh an arbitrary polyhedron. By this method Steiner points are inserted on constrained boundary as Weatherill and Hassan [18] did, which are suppressed one by one later in a separate process. For each Steiner point, a Delaunay triangulation on missing facets is constructed and flat elements of zero volume are created to recover the related topological structure. Du and Wang [14] inserted Steiner points on boundaries through a heuristic approach [20] to reduce the number of Steiner points. They used an edge-swap procedure on the missing boundary facets to remove some of the Steiner points. However, there is some drawback in the method proposed by George et al. [13] and Du and Wang [14]: a number of locked Steiner points are generated which could not be easily removed. Chen et al. [21] combined the work of Du and Wang [14] and Liu et al. [16]. They employed SPR to reduce the number of Steiner points in the final mesh. However, their method still faces the problem of locked Steiner points. Guan et al. [22] proposed a technique named ‘dressing wound’. Compared to the method proposed by George et al. [13] or Du and Wang [14], it introduces more Steiner points. However, this method provides a new perspective for the boundary recovery problem.

In summary, boundary recovery for meshing arbitrary polyhedrons is still difficult. New ideas for the boundary recovery of the 3D Delaunay triangulation are presented in this paper to address some of the difficulties. The method proposed focuses on systematic removal of Steiner points. As a departure from the previous works [13,14,21,22], in the process of removing Steiner points, the proposed approach optimizes the sequence and locations in the removal of Steiner points to reduce the number of locked Steiner points as much as possible. Moreover, a linear programming optimization is adopted to determine the feasible region in relocating Steiner points. Compared with Laplacian smoothing based methods, it guarantees finding feasible positions for Steiner points should they exist.

Delaunay triangulation is the geometric dual of a Voronoi tessellation. It was presented in 1934 by Delaunay who found the property of empty circumsphere criterion [23]. In 3D domain, empty circumsphere criterion can be presented as below: for every tetrahedron there are no vertices in its circumsphere except for the four vertices of its own. In 1981, Bowyer [24] and Watson [25] independently proposed the method of point insertion, which is simple and efficient. The kernel of this method is to insert points one by one until all the points are treated. In order to satisfy the empty circumsphere criterion, the topology of the mesh is corrected after each point insertion.

For a polyhedron represented by a set of triangles, the 3D Delaunay triangulation by point insertion will generate the boundary facets of a convex polyhedron, but there is no guarantee for a concave or multi-connected polyhedron. For the boundary integrity of a general polyhedron, additional work needed be done after point insertion. After partial recovery of some edges and facets by local element swaps 2-3, 3-2 and 4-4 [26], Steiner points can then be inserted on the boundary to recover the remaining boundary edges and facets. The Steiner points have to be removed or repositioned to ensure the topological integrity of the boundary. Algorithm 1 presents the main ideas of the constrained boundary recovery procedure proposed in this paper.
                        Algorithm 1
                        Boundary recovery for 3D Delaunay triangulation.
                              
                                 
                                    Step 1: Take the given polyhedron as input. Set original triangular facets on the boundary as the restricted boundary.


                                    Step 2: Perform Bowyer–Watson algorithm for points on the boundary of the polyhedron, and obtain an initial triangulation of the boundary points.


                                    Step 3: Carry out local element swaps to recover boundary edges and facets.


                                    Step 4: Insert Steiner points to unrecovered boundary edges and facets.


                                    Step 5: Suppress Steiner points on boundary edges.


                                    Step 6: Optimize the tetrahedral mesh, and eliminate flat elements.


                                    Step 7: Suppress Steiner points on boundary facets.


                                    Step 8: Optimize the tetrahedral mesh, and eliminate flat elements.


                                    Step 9: Delete tetrahedra outside the model to obtain the final tetrahedral mesh.

The recovery of the geometry of a triangulated boundary has been studied by many researchers. Effective methods [15,18,20] were proposed to resolve this problem. For the geometric boundary recovery, a method similar to that proposed by George et al. [13] is adopted in this paper, in which intersection points on the boundary facets are taken as Steiner points, which are inserted by means of an enhanced Delaunay insertion to preserve the existing boundary facets. Once the boundary facets are recovered, the next phrase is to remove the Steiner points which have been inserted onto the boundary facets to assist their recovery. Points on the boundary can be removed through local reconnections and the creation of flat elements of zero volume [13,14], but no systematic procedure is given as how these elements could be effectively opened up. Hence, the focus of this paper is to devise a systematic procedure to remove the elements so created in the boundary recovery process.

Before we could present a detailed account of the proposed method, the notion and the definition of locked points have to be clarified.


                     Locked point: A point will be said to be locked if a movement in any direction will render one or more tetrahedral element(s) connected to it to be negative.

As shown in 
                     Fig. 1, S
                     1 is a locked point and S
                     2 is not. Specifically, in Fig. 1, ACB and ABD are boundary facets, tetrahedra ACS
                     1
                     S
                     2, DAS
                     1
                     S
                     2, ACBS
                     1 and ABDS
                     1 are non-positive elements. To remove S
                     1 and S
                     2 from the boundary facets, the possible direction to reposition the points is along the direction normal to triangle BAD. There is no problem to relocate S
                     2 as both tetrahedra ACS
                     1
                     S
                     2 and DAS
                     1
                     S
                     2 will be opened up to have a positive volume. However if S
                     1 is to move upwards, tetrahedra ACS
                     1
                     S
                     2 and DAS
                     1
                     S
                     2 will be inverted to have a negative volume; thus point S
                     1 is locked.

As the movement of locked points is restricted, and they will significantly increase the difficulty in the removal of non-positive elements, an effective boundary recovery procedure should produce as few locked points as possible in the recovery process.

Steiner point removal consists of lifting point on the facets and edges of the boundary. When an edge is broken up by several Steiner points, the order of point removal is crucial for reducing the number of locked points.

As shown in 
                           Fig. 2a, P is a Steiner point on the edge shared by facets F
                           1 and F
                           2. To suppress P, triangles on F
                           1 and F
                           2 are reconnected through edge swaps as shown in Figs. 2b and c. Then triangles acb and abg are formed respectively on F
                           1 and F
                           2 to recover the missing edge. In the reconnection process, elements decP, cebP, cbaP, abgP and bfgP are created and P is repositioned upwards normal to facets F
                           1 and F
                           2 as shown in Fig. 2d.

Suppose boundary edge E is broken up by a series of Steiner points 
                              {
                              
                                 
                                    S
                                 
                                 
                                    i
                                 
                              
                              :
                              i
                              =
                              1
                              ,
                              2
                              ,
                              …
                              n
                              }
                            counting from one end of E to the other end. To recover edge E, we first deal with points 
                              
                                 
                                    S
                                 
                                 
                                    1
                                 
                              
                              ,
                              
                                 
                                    S
                                 
                                 
                                    3
                                 
                              
                              ,
                              …
                              
                                 
                                    S
                                 
                                 
                                    2
                                    k
                                    −
                                    1
                                 
                              
                              ,
                              
                              k
                              =
                              (
                              n
                              +
                              1
                              )
                              /
                              2
                           , and then the rest of the Steiner points 
                              
                                 
                                    S
                                 
                                 
                                    2
                                 
                              
                              ,
                              
                                 
                                    S
                                 
                                 
                                    4
                                 
                              
                              ,
                              …
                              
                                 
                                    S
                                 
                                 
                                    2
                                    k
                                 
                              
                              ,
                              
                              k
                              =
                              n
                              /
                              2
                           . By dividing the Steiner points into two groups, only half of the points, namely, 
                              
                                 
                                    S
                                 
                                 
                                    2
                                 
                              
                              ,
                              
                                 
                                    S
                                 
                                 
                                    4
                                 
                              
                              ,
                              …
                              
                                 
                                    S
                                 
                                 
                                    2
                                    k
                                 
                              
                            are locked points. A boundary edge AB with three Steiner points S
                           1, S
                           2 and S
                           3 as shown in 
                           Fig. 3 is taken as an example, and the result will be compared with the procedure by random point selection.

The proposed method removes the Steiner points in the order of S
                           1, S
                           3 and S
                           2. The results are depicted in 
                           Figs. 4a and b. In the process of recovering edge AB, flat elements AS
                           1
                           S
                           2
                           C, AS
                           1
                           S
                           2
                           D, BS
                           2
                           S
                           3
                           C, BS
                           2
                           S
                           3
                           D, ABCS
                           2 and ABDS
                           2 are created. S
                           2 is locked as wherever S
                           2 is repositioned at least one of the above six elements will be made negative. S
                           1 and S
                           3 are not locked as they could move upwards normal to facet CBA or BAD without producing any negative tetrahedral element(s).

When Steiner points are removed by a random selection, there are six possible suppression orders: S
                           1
                           S
                           2
                           S
                           3, S
                           1
                           S
                           3
                           S
                           2, S
                           2
                           S
                           1
                           S
                           3, S
                           2
                           S
                           3
                           S
                           1, S
                           3
                           S
                           1
                           S
                           2 and S
                           3
                           S
                           2
                           S
                           1. And four of them (i.e. S
                           1
                           S
                           2
                           S
                           3, S
                           2
                           S
                           1
                           S
                           3, S
                           2
                           S
                           3
                           S
                           1 and S
                           3
                           S
                           2
                           S
                           1) will produce two locked points. In other words, methods by random point selection have 66.6% chance to create one extra locked point in this 3-Steiner-point edge recovery. In removing Steiner points S
                           1, S
                           2 and S
                           3, flat elements AS
                           1
                           S
                           2
                           C, AS
                           1
                           S
                           2
                           D, AS
                           2
                           S
                           3
                           C, AS
                           2
                           S
                           3
                           D, ABCS
                           3 and ABDS
                           3 are created, which makes S
                           2 and S
                           3 
                           locked. In this case, node reposition takes three steps to open up all these flat elements as shown in 
                           Fig. 5a–c.

Boundary face recovery is performed after all boundary edges are recovered and all flat elements are opened up. Steiner points, which are connected locally to form a valid topological structure with possibly some flat elements, are then lifted from the boundary faces by means of an optimization process. Two special cases for boundary face recovery are discussed in detail to elucidate the idea.

Edges connected to Steiner point P on the boundary facet are removed by proper element swaps. In 
                           Fig. 6a, Steiner point P is on triangular facet F. P could be suppressed by swapping Pa with be and Pc with bd as shown in Fig. 6b. As shown in Fig. 6c, flat elements Pabe, Pbde and Pbcd are created to recover the correct topological structure.

When there are more than one Steiner points on a facet, the order of point removal is crucial. A proper sequence could significantly reduce the number of locked points. The central idea in optimizing the order of suppression is to give priority to the Steiner point with the least number of Steiner point neighbors. In other words, for each Steiner point on a facet we take the number of its Steiner point neighbors as weight; and Steiner points are removed following the attached weight in an ascending order.

To be more specific, the operations of a boundary facet with four Steiner points are discussed in detail as shown in 
                           Fig. 7a. The weights of Steiner points S
                           1, S
                           2, S
                           3 and S
                           4 are 3, 2, 2 and 3 respectively. According to the proposed scheme, the order for recovery is S
                           2, S
                           3, S
                           4 and S
                           1 and elements S
                           1
                           CS
                           4
                           S
                           2, S
                           1
                           BCS
                           2, S
                           1
                           ABS
                           3, S
                           1
                           S
                           4
                           AS
                           3, S
                           1
                           CAS
                           4 and ABCS
                           1 are created as shown in Fig. 7b. The above weighted method produces two locked points S
                           1 and S
                           4. On the other hand, if Steiner points are removed from the boundary facet by a random selection, there are totally 24 possible suppression orders, and 20 (83.3%) of them will create three locked points. For instance, one of the orders is to suppress S
                           1, S
                           2, S
                           3 and S
                           4 sequentially. As shown in Fig. 7c, the elements created are S
                           2
                           S
                           4
                           BS
                           1, S
                           3
                           BS
                           4
                           S
                           1, CS
                           4
                           BS
                           2, ABS
                           4
                           S
                           3 and ABCS
                           4. Consequently, three points instead of two points S
                           2, S
                           3 and S
                           4 become locked.

In general, if the weights (number of Steiner point neighbors) of the Steiner points are the same as shown in 
                              
                              Figs. 8a and 9a, the proposed weighted method will not reduce the number of locked points. However, under this circumstance, an extra Steiner point could be introduced to reduce the locked points. Recovery procedures for the cases of three Steiner points and four Steiner points are described as follows, where points not locked are moved slightly in the figures.

As shown in Fig. 8b, an extra Steiner point P is created at the barycenter of S
                              1, S
                              2 and S
                              3. The missing boundary facet ABC is recovered through the creation of elements PABC, PS
                              1
                              S
                              2
                              S
                              3, PAS
                              2
                              S
                              3, PBS
                              1
                              S
                              3, PCS
                              1
                              S
                              2, PS
                              1
                              BC, PS
                              2
                              AC and PS
                              3
                              AB. Consequently, there is only one locked point P in the recovery of facet ABC. Unlike our approach, the method of George and Du creates elements S
                              1
                              S
                              2
                              S
                              3
                              B, S
                              1
                              S
                              2
                              BC, S
                              2
                              S
                              3
                              CB, S
                              2
                              S
                              3
                              CA and S
                              3
                              ABC as shown in Fig. 8c, in which S
                              2 and S
                              3 are locked points.

As shown in Fig. 9b, an extra Steiner point P is introduced at the barycenter of any three points of S
                              1, S
                              2, S
                              3 and S
                              4. Elements PABC, PS
                              1
                              S
                              2
                              S
                              3, PS
                              1
                              S
                              3
                              S
                              4, PS
                              1
                              S
                              4
                              S
                              2, PAS
                              2
                              S
                              3, PBS
                              4
                              S
                              3, PCS
                              4
                              S
                              2, PS
                              4
                              BC, PS
                              2
                              AC and PS
                              3
                              AB are created to recover the boundary facet ABC, in which P and S
                              4 are locked points. On the other hand, by the method of George and Du, elements S
                              1
                              S
                              2
                              S
                              3
                              S
                              4, S
                              2
                              S
                              3
                              S
                              4
                              C, S
                              2
                              S
                              3
                              CA, S
                              3
                              S
                              4
                              AC, S
                              3
                              S
                              4
                              AB and S
                              4
                              ABC are created, in which three points S
                              2, S
                              3 and S
                              4 are locked as shown in Fig. 9c.

In the process of boundary recovery, flat elements of zero volume are created. These elements have to be opened up by a combination of face-swap, reposition (Laplacian-smoothing) and the insertion of extra nodes. A reposition method is an essential part of flat element removal. Among existing reposition approaches [27–30], the reposition method by means of linear programming is adopted, in which the optimal position of a Steiner point could be determined such that all tetrahedra connected to it are ensured to be positive. The method is illustrated with a 2D example.

As shown in 
                        Fig. 10a, P(x
                        1, x
                        2) is a point in a 2D triangular mesh with adjacent elements bounded by polygon V
                        1
                        V
                        2
                        V
                        3
                        V
                        4
                        V
                        5. Let 
                           
                              
                                 
                                    n
                                    →
                                 
                              
                              
                                 1
                              
                           
                         be a normal vector to edge V
                        1
                        V
                        2 pointing towards the interior of polygon V
                        1
                        V
                        2
                        V
                        3
                        V
                        4
                        V
                        5. If 
                           
                              
                                 V
                              
                              
                                 1
                              
                           
                           P
                           ⋅
                           
                              
                                 
                                    n
                                    →
                                 
                              
                              
                                 1
                              
                           
                           >
                           0
                        , triangle V
                        1
                        V
                        2
                        P is positive, hence P(x
                        1, x
                        2) is valid if it satisfies the following conditions:
                           
                              (4.1)
                              
                                 
                                    
                                       V
                                    
                                    
                                       i
                                    
                                 
                                 P
                                 ⋅
                                 
                                    
                                       
                                          n
                                          →
                                       
                                    
                                    
                                       i
                                    
                                 
                                 ≥
                                 0
                                 
                                 (
                                 i
                                 =
                                 1
                                 ,
                                 2
                                 …
                                 m
                                 )
                              
                           
                        where m is the number of the boundary edges, 
                           
                              
                                 
                                    n
                                    →
                                 
                              
                              
                                 i
                              
                           
                           (
                           
                              
                                 n
                              
                              
                                 i
                                 x
                              
                           
                           ,
                           
                              
                                 n
                              
                              
                                 i
                                 y
                              
                           
                           )
                         is the unit normal vector to edge E
                        
                           i
                         and V
                        
                           i
                         is the first vertex of the edge E
                        
                           i
                        . The constraints can be represented by the following inequalities:
                           
                              (4.2)
                              
                                 (
                                 P
                                 ⋅
                                 
                                    
                                       
                                          n
                                          →
                                       
                                    
                                    
                                       i
                                    
                                 
                                 −
                                 
                                    
                                       s
                                    
                                    
                                       i
                                    
                                 
                                 )
                                 
                                    
                                       δ
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 
                                    
                                       c
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       δ
                                    
                                    
                                       i
                                    
                                 
                              
                           
                        
                        
                           
                              
                                 
                                    
                                       c
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 
                                    
                                       V
                                    
                                    
                                       i
                                    
                                 
                                 ⋅
                                 
                                    
                                       
                                          n
                                          →
                                       
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                    
                                       δ
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 
                                    {
                                    
                                       
                                          
                                             
                                                1
                                             
                                             
                                                
                                                   
                                                      
                                                         c
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   ≥
                                                   0
                                                
                                             
                                          
                                          
                                             
                                                
                                                   −
                                                   1
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         c
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   <
                                                   0
                                                
                                             
                                          
                                       
                                    
                                 
                                 ,
                                 
                                 
                                    
                                       s
                                    
                                    
                                       i
                                    
                                 
                                 ≥
                                 0
                                 
                                 are
                                 
                                 slack
                                 
                                 variables
                              
                           
                        It may not be easy to solve the formulation (4.2) directly, but we can convert this problem into a linear programming problem, which can be readily solved by the simplex method. Now, Eq. (4.2) is transformed to a standard format of linear programming:
                           
                              (4.3)
                              
                                 {
                                 
                                    
                                       
                                          
                                             
                                                min
                                             
                                          
                                          
                                             
                                                f
                                                =
                                                
                                                   ∑
                                                   
                                                      j
                                                      =
                                                      1
                                                   
                                                   m
                                                
                                                
                                                   
                                                      
                                                         s
                                                      
                                                      
                                                         j
                                                      
                                                   
                                                
                                             
                                          
                                       
                                       
                                          
                                             
                                                s
                                                .t
                                                .
                                             
                                          
                                          
                                             
                                                A
                                                X
                                                =
                                                b
                                                ,
                                                
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      i
                                                   
                                                
                                                ≥
                                                0
                                                ,
                                                
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      j
                                                   
                                                
                                                ≥
                                                0
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              
                                 
                                    
                                       
                                          A
                                          =
                                          
                                             {
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  δ
                                                               
                                                               
                                                                  1
                                                               
                                                            
                                                            ⋅
                                                            
                                                               
                                                                  n
                                                               
                                                               
                                                                  1
                                                                  x
                                                               
                                                            
                                                         
                                                      
                                                      
                                                         
                                                            
                                                               
                                                                  δ
                                                               
                                                               
                                                                  1
                                                               
                                                            
                                                            ⋅
                                                            
                                                               
                                                                  n
                                                               
                                                               
                                                                  1
                                                                  y
                                                               
                                                            
                                                         
                                                      
                                                      
                                                         
                                                            −
                                                            
                                                               
                                                                  δ
                                                               
                                                               
                                                                  1
                                                               
                                                            
                                                         
                                                      
                                                      
                                                      
                                                         0
                                                      
                                                   
                                                   
                                                      
                                                         ⋮
                                                      
                                                      
                                                         ⋮
                                                      
                                                      
                                                      
                                                         ⋱
                                                      
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  δ
                                                               
                                                               
                                                                  m
                                                               
                                                            
                                                            ⋅
                                                            
                                                               
                                                                  n
                                                               
                                                               
                                                                  m
                                                                  x
                                                               
                                                            
                                                         
                                                      
                                                      
                                                         
                                                            
                                                               
                                                                  δ
                                                               
                                                               
                                                                  m
                                                               
                                                            
                                                            ⋅
                                                            
                                                               
                                                                  n
                                                               
                                                               
                                                                  m
                                                                  y
                                                               
                                                            
                                                         
                                                      
                                                      
                                                         0
                                                      
                                                      
                                                      
                                                         
                                                            −
                                                            
                                                               
                                                                  δ
                                                               
                                                               
                                                                  m
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                             }
                                          
                                          ,
                                       
                                    
                                    
                                       
                                          X
                                          =
                                          
                                             
                                                {
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      1
                                                   
                                                
                                                
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      2
                                                   
                                                
                                                
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      1
                                                   
                                                
                                                
                                                …
                                                
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      m
                                                   
                                                
                                                }
                                             
                                             T
                                          
                                          ,
                                          
                                          b
                                          =
                                          
                                             
                                                {
                                                
                                                   
                                                      c
                                                   
                                                   
                                                      1
                                                   
                                                
                                                ⋅
                                                
                                                   
                                                      δ
                                                   
                                                   
                                                      1
                                                   
                                                
                                                
                                                …
                                                
                                                
                                                   
                                                      c
                                                   
                                                   
                                                      m
                                                   
                                                
                                                ⋅
                                                
                                                   
                                                      δ
                                                   
                                                   
                                                      m
                                                   
                                                
                                                }
                                             
                                             T
                                          
                                       
                                    
                                 
                              
                           
                        As we aim at obtaining the feasible region, the objective function could be an arbitrary linear polynomial of the slack variables. The feasible region exists if f>0, and it degenerates into a line or a point if f=0. The feasible region v
                        1
                        v
                        2
                        v
                        3
                        v
                        4
                        v
                        5 of formulation (4.3) for a concave pentagon is shown in Fig. 10b. As the feasible region is always convex, the barycenter of v
                        1
                        v
                        2
                        v
                        3
                        v
                        4
                        v
                        5 can be the new position for the relocation of P.

In three dimensions, all tetrahedra connected to a point form a polyhedron. As shown in 
                        Fig. 11a, node P is shared by eight tetrahedra in the form of a twisted Schönhardt polyhedron. Tetrahedron ABCP is a flat element. The problem of opening up flat element ABCP is equivalent to finding a feasible position for P in the polyhedron ABCDEF as shown in Fig. 11b.

The node reposition problem can be transformed into an optimization problem as in the 2D case. The inequalities in the format of linear programming are given by
                           
                              (4.4)
                              
                                 
                                    
                                       V
                                    
                                    
                                       i
                                    
                                 
                                 P
                                 ⋅
                                 
                                    
                                       
                                          n
                                          →
                                       
                                    
                                    
                                       i
                                    
                                 
                                 ≥
                                 0
                                 
                                 (
                                 i
                                 =
                                 1
                                 ,
                                 2
                                 …
                                 m
                                 )
                              
                           
                        where m is the number of the boundary facets, 
                           
                              
                                 
                                    n
                                    →
                                 
                              
                              
                                 i
                              
                           
                         is the unit normal vector to boundary facet F
                        
                           i
                         and V
                        
                           i
                         is a vertex on facet F
                        
                           i
                        . The inequality (4.4) is rewritten in a standard form for linear programming as explained in Section 4.1. In case the feasible region exists, the objective function f is greater than 0, and the barycenter of the feasible region is the new position of P. In fact, the feasible region is given by the bounded region of the extended boundary facets of the given polyhedron.

The drawback of Laplacian based methods is that a valid position for a Steiner point cannot be determined inside a non-convex polygon, whereas the proposed reposition method by means of linear programming could always give the optimal solution should it exist. As shown in 
                        Fig. 12a, there are six tetrahedra, PCBA, PECA, PBDA, PDEA, CBEP and EBDP, where CBEP and EBDP are flat elements. To relocate point P, Laplacian based methods move P along PQ outside the polyhedron as shown in Fig. 12b. However, the proposed linear programming reposition method finds a valid position Q which is well within the polyhedron as shown in Fig. 12c. In the actual implementation, we combine the linear programming reposition method and the smart Laplacian method to relocate Steiner points. Specifically, smart Laplacian method is first applied to determine a new position for a Steiner point, and if this fails, the proposed linear programming reposition method is invoked.

Four application examples are presented to describe some key features of the proposed method in details. The first example is a mechanical support model as shown in 
                     Fig. 13a. About 152 boundary facets were missing in the initial Delaunay triangulation. To recover these missing boundary facets, 50 Steiner points were inserted including 43 points on the original boundary edges. The largest number of Steiner points inserted on a single edge was 5 as shown in Fig. 13b. The missing edge is shown in blue color and the 5 Steiner points are marked with different colors. To remove these Steiner points, only two iterations were required following the method proposed in this paper. As shown in Fig. 13d, in the first iteration three unlocked points are first relocated; then the other two locked points are repositioned in the second iteration. On the other hand, random procedure would need five iterations to remove all these 5 Steiner points as 4 out of 5 Steiner points were locked. As shown in Fig. 13e, only one Steiner point could be relocated in each iteration.

The second example is a screw model as shown in 
                     Fig. 14a. In this model, 433 Steiner points are introduced including 40 points on the boundary facets, in which the largest number of Steiner points inserted on a single facet is 4. One facet with 4 Steiner points is shown in Fig. 14b and c, where Fig. 14c is the mesh of Fig. 14b in a different view. To remove these Steiner points, Fig. 14d depicts the process following the proposed suppression order optimization (i.e. higher priority to points with small number of Steiner point neighbors). Compared with the proposed method, the random procedure required more iterations to suppress Steiner points on the missing boundary facet. As shown in Fig. 14e, although it is not the worst case (four iterations), it still needed one more iteration compared to the weighted method.

Another case of boundary facet recovery is shown in Figs. 14f and g. All the 3 Steiner points on the missing facet have the same number of Steiner point neighbors. Fig. 14h and i depict respectively the procedures of the proposed approach and that of George and Du. Although the proposed approach introduces one more Steiner points, it took only two iterations as shown in Fig. 14h, which is less than the method of George and Du as shown in Fig. 14i.

The third example is an impeller model with 172 Steiner points inserted as shown in 
                     Fig. 15a. Point relocation is an essential part in opening up flat elements. Magnified views of a critical recovery zone in the form of a concave polyhedron are shown in Fig. 15b and c. The node reposition aims at relocating the Steiner point shown in red color in Fig. 15b and c to remove the flat elements connected to it. The feasible region of the Steiner point is presented as the green polyhedron as shown in Fig. 15d. The new position for the Steiner point is at the barycenter of the region, which is marked red in Fig. 15e. Consequently, all flat elements connected to the point are opened up as shown in Fig. 15f.

The boundary recovery approach proposed in this paper has been integrated into our own in-house developed mesh generator. Surface mesh models from the repository http://www-roc.inria.fr/gamma/gamma.php are utilized to demonstrate the effectiveness of the proposed approach. The falcon model as shown in 
                     Fig. 16a is reported here to discuss the main features of our tetrahedral mesh generator. There are 141,470 triangles on the boundary, including 19,738 (14%) sharp triangles with an angle less than 5°. The result of mesh generation is shown in Fig. 16b. To compare with existing tetrahedral mesh generators, ANSYS13.0, HyperMesh10.0 and HyperMesh11.0 were applied to mesh the falcon model. If Steiner points were permitted to stay on the boundary, all three mesh generators succeeded in producing a valid tetrahedral mesh; otherwise, only HyperMesh11.0 was able to produce a valid mesh, and ANSYS13.0 and HyperMesh10.0 crashed in the process of boundary recovery. Comparing the tetrahedral mesh generated by the proposed method with the one by HyperMesh11.0, the smallest dihedral angle in the mesh by the new approach is 2.09°, whereas in the mesh of HyperMesh11.0 it is 0.513°. Considering the distribution of dihedral angles from 0° to 3° with an increment interval of 0.3°, there are much fewer sharp angles in the mesh generated by the proposed recovery procedure compared to the mesh of HyperMesh11.0 as shown in 
                     Table 1 and Fig. 16c.

Four more industrial examples (
                     
                     
                     
                     Figs. 17–20) are included to demonstrate the capability and the characteristics of the proposed boundary recovery procedure in dealing with complex practical applications. The general description and the statistics in the boundary recovery process of the model are listed in 
                     Table 2. For the quoted examples, in each case, there are about one thousand missing edges and a couple of thousands of missing faces; however, the number of Steiner points needed to assist the edge and face recovery are relative few, showing that most of the missing quantities can already be recovered by some topological operations involving the swap of element edges and faces. The seahorse model (Fig. 17) is the largest example with 173,160 boundary faces meshed in 833,309 tetrahedral elements. However, it is not the most difficult example as the shape qualities of the boundary triangles are not that bad, even though 11 Steiner points are needed in the recovery of one boundary face. The tyre and engine models (Figs. 19 and 20) can be considered as more difficult as more Steiner points are required for the edge and face recovery. The minimum γ-quality of the tetrahedral elements are quite low, probably due to the poor boundary facets and more Steiner points are used in recovering the boundary faces.

New ideas for the constrained boundary recovery of 3D Delaunay triangulation are presented to address some of the critical issues in finite element mesh generation. The notion of locked points has been introduced to elucidate why the repositioning and the removal of flat elements are sometimes very difficult. The sequence in removing the Steiner points on an edge has been carefully reviewed so as to minimize the number of locked points in the recovery process. As for the removal of Steiner points on a triangular facet, the order of removal is determined by a weight related to the number of neighboring Steiner points, which in general is superior to a random selection process commonly adopted. A linear programming technique is also employed to determine the feasible region, at the center of which a Steiner point can be relocated to ensure that all tetrahedral elements connected to it are positive. Work examples are included to show the details of the boundary recovery procedure, along with several practical applications adopted from the industry with difficult boundary conditions. It is founded that the method proposed in this paper can handle complicated industrial finite element models and could produce better results than popular commercial software available in the market in terms of mesh quality.

@&#ACKNOWLEDGMENT@&#

The financial support from HKSAR GRF Grant to the research project HKU715110E on “Drifted based seismic fragility analysis of high-rise RC building with transfer structures” is greatly acknowledged. The authors would also like to appreciate the joint supports to this project by the National Natural Science Foundation of China (Grant nos. 10872040, 10572032 and 10721062).

@&#REFERENCES@&#

