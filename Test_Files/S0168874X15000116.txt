@&#MAIN-TITLE@&#Optimal domain decomposition using Colliding Bodies Optimization and k-median method

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           An efficient approach is presented for optimal domain decomposition of FEMs.


                        
                        
                           
                           A clique graph is used for transforming the connectivity of a finite element model into that of the graph.


                        
                        
                           
                           To decompose the nodes of a finite element model to k subdomains, k-median approach is employed.


                        
                        
                           
                           For optimal subdomain decomposition, a recently developed meta-heuristic algorithm, CBO, and PSO are utilized.


                        
                        
                           
                           The performance of the methods is investigated through four FEMs.


                        
                        
                           
                           A comparison of the results of CBO and PSO algorithms is performed.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Optimal domain decomposition

Colliding Bodies Optimization

Particle Swarm Optimization




                     k-median method

Finite elements meshes

@&#ABSTRACT@&#


               
               
                  An efficient approach is presented for optimal domain decomposition of finite element meshes in conjunction with k-median method and a meta-heuristic algorithm. A clique graph is used for transforming the connectivity of a finite element model (FEM) into that of the corresponding graph. Subsequently, to decompose the nodes of a graph or the meshes of a finite element model to k subdomains, k-median approach is employed. Then, for finding k medians of graph, a recently developed meta-heuristic algorithm, so-called Colliding Bodies Optimization (CBO), and standard Particle Swarm Optimization (PSO) are utilized. The performance of these methods is investigated through four FEMs to minimize the cost of k-median problem. A comparison of the numerical results using the CBO and PSO algorithms indicates that the CBO is capable of performing better decomposition using smaller or equal computational efforts.
               
            

@&#INTRODUCTION@&#

Parallel processing has been widely applied to large-scale problem like the analysis of hydraulic systems, electrical networks and finite element meshes. The aim of a parallel algorithm is to decompose the given domain of system into subdomains, and analyze each subdomain by a processor. Given a number of available processors q, an arbitrary finite element model (FEM) is decomposed into q subdomains where formation of element matrices, assembly of global matrices, partial factorization of the stiffness matrix and state determination or evaluation of generalized stresses can be carried out independently of similar computations for the other subdomains, and hence can be performed in parallel. While the subdomains are processed in a parallel architecture, the time to complete a task will be the time to compute the longest subtask. An algorithm for optimizing the decomposed mesh can be considered as efficient if it yields subdomains that require an equal amount of execution time.

Some algorithms were developed for the problem of finding optimal domain of finite elements methods [1–6], and some review papers on this topic are also available [7,8]. Finding the medians of a graph is an NP-hard combinatorial optimization problem, and the exact solution of the problem is complex and highly time consuming for graphs with a large number of nodes. Such algorithms can be found in the works of [9–12]. Therefore, many approximate algorithms are developed for finding the medians of a graph. The simplest approach to deal with domain decomposition is referred to as the k-median method [7]. In this method, a graph is associated to the connectivity property of the considered finite element. Then, the optimal medians in graph are selected through the sum of distance of nodes to optimum medians. Recently, metaheuristics algorithms such as Genetic algorithms [13,14], bionomic approaches [15] and ant colony [16,17] are developed in order to obtain solutions for k-median problem.

As a newly developed meta-heuristic algorithm, the Colliding Bodies Optimization (CBO) is introduced for design of structural problems [18,19]. This algorithm can be considered as a multi-agent method, where each agent is a Colliding Body (CB). Each CB is considered as an object with a specified mass and velocity before the collision. After collision occurs, each CB moves to a new position according to the new velocity. This algorithm utilizes simple formulation; and it requires no internal parameter tuning.

In this paper, an algorithm based on the k-median concept is presented for optimal domain decomposition of finite element meshes with continuous variables using the CBO algorithm. The standard PSO algorithm has also been utilized for comparison study. A computer program is developed to perform this optimization and four numerical examples with different subdomains are presented to demonstrate the efficiency of the proposed method.

A simple graph G is defined as a set N(G) of nodes and a set E(G) of edges together with a relation of incidence which associate two distinct nodes with each edge, known as its ends. Two nodes of a graph are called adjacent if these nodes are the end nodes of an edge. An edge is called incident with a node if it is an end node of the edge.

A subgraph G
                        
                           i
                         of a graph G, is a graph for which N(G
                        
                           i
                        )⊆N(G) and E(G
                        
                           i
                        )⊆E(G), and each edge of G
                        
                           i
                         has the same ends as in G. A path is a finite sequence P
                        
                           k
                        ={n
                        0, e
                        1, n
                        1,…,e
                        
                           p
                        
                        , n
                        
                           p
                        } whose terms are alternately distinct nodes n
                        
                           i
                         and distinct edges e
                        
                           i
                         for 1≤i≤p and n
                        
                           i−1 and n
                        
                           i
                         are two end nodes of e
                        
                           i
                        . A tree T of G is a subgraph which contains no cycle; a cycle being a closed path. A spanning tree is a tree containing all the nodes of G. A shortest route tree (SRT
                        
                           n0) rooted from a specified node (starting node) n
                        
                           0
                        , is a spanning tree for which the distance between every node n
                        
                           j
                         of T and n
                        0 is minimum. The distance between two nodes is taken as the number of edges in the shortest path between these nodes.

A clique graph G of a FE mesh has its nodes in a one-to-one correspondence with the elements of the considered FE mesh, and two nodes of G are connected by an edge if the corresponding elements have at least one common node [5].

For a FEM decomposed into q subdomains, each subdomain can be treated as a super element and the corresponding stiffness matrix and its force and displacement vectors can be written in a partitioning form:
                           
                              (1)
                              
                                 
                                    [
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         k
                                                      
                                                      
                                                         i
                                                         i
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         k
                                                      
                                                      
                                                         i
                                                         b
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      
                                                         k
                                                      
                                                      
                                                         b
                                                         i
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         k
                                                      
                                                      
                                                         b
                                                         b
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                    ]
                                 
                                 
                                    [
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         d
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      
                                                         d
                                                      
                                                      
                                                         b
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                    ]
                                 
                                 =
                                 
                                    [
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         Q
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      
                                                         Q
                                                      
                                                      
                                                         b
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                    ]
                                 
                              
                           
                        In the above equation, a boundary node is defined as a node which is part of more than one subdomain and degrees of freedom at the boundary nodes are treated as boundary degrees of freedom. Here d
                        
                           i
                         and d
                        
                           b
                         are displacements, and Q
                        
                           i
                         and Q
                        
                           b
                         are the force vectors corresponding to internal and boundary nodes, respectively.

Using static condensation for internal nodes, we have
                           
                              (2)
                              
                                 
                                    [
                                    
                                       kii
                                    
                                    ]
                                 
                                 [
                                 
                                    
                                       d
                                    
                                    
                                       i
                                    
                                 
                                 ]
                                 +
                                 [
                                 
                                    
                                       k
                                    
                                    
                                       i
                                       b
                                    
                                 
                                 ]
                                 [
                                 
                                    
                                       d
                                    
                                    
                                       b
                                    
                                 
                                 ]
                                 =
                                 [
                                 
                                    
                                       Q
                                    
                                    
                                       i
                                    
                                 
                                 ]
                              
                           
                        or
                           
                              (3)
                              
                                 [
                                 
                                    
                                       d
                                    
                                    
                                       i
                                    
                                 
                                 ]
                                 =
                                 
                                    
                                       [
                                       
                                          
                                             k
                                          
                                          
                                             i
                                             i
                                          
                                       
                                       ]
                                    
                                    
                                       −
                                       1
                                    
                                 
                                 {
                                 [
                                 
                                    
                                       Q
                                    
                                    
                                       i
                                    
                                 
                                 ]
                                 −
                                 [
                                 
                                    
                                       k
                                    
                                    
                                       i
                                       b
                                    
                                 
                                 ]
                                 [
                                 
                                    
                                       d
                                    
                                    
                                       b
                                    
                                 
                                 ]
                                 }
                                 .
                              
                           
                        Substituting [d
                        
                           i
                        ] in the second part of Eq. (1), leads to
                           
                              (4)
                              
                                 
                                    [
                                    
                                       
                                          
                                             k
                                          
                                          
                                             b
                                             i
                                          
                                       
                                    
                                    ]
                                 
                                 
                                    
                                       [
                                       
                                          
                                             k
                                          
                                          
                                             i
                                             i
                                          
                                       
                                       ]
                                    
                                    
                                       −
                                       1
                                    
                                 
                                 {
                                 [
                                 
                                    
                                       Q
                                    
                                    
                                       i
                                    
                                 
                                 ]
                                 −
                                 [
                                 
                                    
                                       k
                                    
                                    
                                       i
                                       b
                                    
                                 
                                 ]
                                 [
                                 
                                    
                                       d
                                    
                                    
                                       b
                                    
                                 
                                 ]
                                 }
                                 +
                                 [
                                 
                                    
                                       k
                                    
                                    
                                       b
                                       b
                                    
                                 
                                 ]
                                 [
                                 
                                    
                                       d
                                    
                                    
                                       b
                                    
                                 
                                 ]
                                 =
                                 [
                                 
                                    
                                       Q
                                    
                                    
                                       b
                                    
                                 
                                 ]
                              
                           
                        or
                           
                              (5)
                              
                                 [
                                 
                                    
                                       k
                                    
                                    ⁎
                                 
                                 ]
                                 [
                                 
                                    
                                       d
                                    
                                    
                                       b
                                    
                                 
                                 ]
                                 =
                                 [
                                 
                                    
                                       Q
                                    
                                    
                                       b
                                    
                                 
                                 ]
                                 −
                                 [
                                 
                                    
                                       k
                                    
                                    
                                       b
                                       i
                                    
                                 
                                 ]
                                 
                                    
                                       [
                                       
                                          
                                             k
                                          
                                          
                                             i
                                             i
                                          
                                       
                                       ]
                                    
                                    
                                       −
                                       1
                                    
                                 
                                 [
                                 
                                    
                                       Q
                                    
                                    
                                       i
                                    
                                 
                                 ]
                              
                           
                        where
                           
                              (6)
                              
                                 [
                                 
                                    
                                       k
                                    
                                    ⁎
                                 
                                 ]
                                 =
                                 {
                                 [
                                 
                                    
                                       k
                                    
                                    
                                       b
                                       b
                                    
                                 
                                 ]
                                 −
                                 [
                                 
                                    
                                       k
                                    
                                    
                                       b
                                       i
                                    
                                 
                                 ]
                                 
                                    
                                       [
                                       
                                          
                                             k
                                          
                                          
                                             i
                                             i
                                          
                                       
                                       ]
                                    
                                    
                                       −
                                       1
                                    
                                 
                                 [
                                 
                                    
                                       k
                                    
                                    
                                       i
                                       b
                                    
                                 
                                 ]
                                 }
                              
                           
                        is the condensed super-element stiffness matrix and
                           
                              (7)
                              
                                 [
                                 
                                    
                                       Q
                                    
                                    ⁎
                                 
                                 ]
                                 =
                                 [
                                 
                                    
                                       Q
                                    
                                    
                                       b
                                    
                                 
                                 ]
                                 −
                                 [
                                 
                                    
                                       k
                                    
                                    
                                       b
                                       i
                                    
                                 
                                 ]
                                 
                                    
                                       [
                                       
                                          
                                             k
                                          
                                          
                                             i
                                             i
                                          
                                       
                                       ]
                                    
                                    
                                       −
                                       1
                                    
                                 
                                 [
                                 
                                    
                                       Q
                                    
                                    
                                       i
                                    
                                 
                                 ]
                              
                           
                        is the corresponding modified load vector. Thus
                           
                              (8)
                              
                                 [
                                 
                                    
                                       k
                                    
                                    ⁎
                                 
                                 ]
                                 [
                                 
                                    
                                       d
                                    
                                    
                                       b
                                    
                                 
                                 ]
                                 =
                                 [
                                 
                                    
                                       Q
                                    
                                    ⁎
                                 
                                 ]
                              
                           
                        can be used to assemble structural stiffness matrix and the nodal load vector, following an standard stiffness method of analysis.

In order to illustrate the domain decomposition method, the finite element mesh shown in 
                        Fig. 1 is partitioned into four submeshes. The global stiffness matrix (n×n) of the FEM shown in 
                        Fig. 2 is first partitioned into four row blocks. The condensed super-element stiffness matrices of the resulting row matrices (n/4, n) of each submesh are evaluated using Eq. (6) and the corresponding modified load vectors are evaluated using Eq. (7). Then, the displacements of the boundary nodes are evaluated using Eq. (8). In following, the displacements of boundary nodes send to each corresponded processor and the displacement of internal nodes of each submesh are evaluated. The burden of each processor is solving n/4 equations and finding the internal nodal displacements of submeshes.

An automatic finite element domain decomposer should meet four basic requirements in order to be efficient:
                           
                              a)
                              It should be able to handle irregular geometry and arbitrary discretization in order to be general purpose.

It must yield a set of balanced subdomains in order to ensure that the overall computational load be as evenly distributed as possible among the processor.

It should minimize the amount of interface nodes in order to reduce the cost of synchronization and/or message passing between the processors.

It must result in subdomains with proper aspect ratios, in order to improve the convergence rate of domain decomposition based iterative method.

The aim of k-median problem is to decompose a node set, N, into k subsets, 
                           
                              
                                 N
                              
                              
                                 k
                              
                           
                           ∈
                           N
                        , such that the sum of the distances of the nodes of subdomains to their median becomes minimum. The problem of k-median can be stated as optimizing a function which decomposes the domain G into k subdomain 
                           
                              
                                 G
                              
                              
                                 1
                              
                           
                           ,
                           
                              
                                 G
                              
                              
                                 2
                              
                           
                           ,
                           ⋯
                           ,
                           
                              
                                 G
                              
                              
                                 k
                              
                           
                        , where k is the number of subdomains [20]. The objective function which must be minimized is formulated as:
                           
                              (9)
                              
                                 
                                    
                                       σ
                                    
                                    
                                       0
                                    
                                 
                                 (
                                 
                                    
                                       N
                                    
                                    
                                       k
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       ∑
                                       
                                          j
                                          ∈
                                          N
                                       
                                    
                                    
                                       
                                          
                                             v
                                          
                                          
                                             j
                                          
                                       
                                       d
                                       (
                                       
                                          
                                             N
                                          
                                          
                                             k
                                          
                                       
                                       ,
                                       j
                                       )
                                    
                                 
                              
                           
                        where 
                           
                              
                                 σ
                              
                              
                                 0
                              
                           
                           (
                           
                              
                                 N
                              
                              
                                 k
                              
                           
                           )
                         is called the out-transmission of nodes
                           
                              
                                 N
                              
                              
                                 k
                              
                           
                        , 
                           
                              
                                 N
                              
                              
                                 k
                              
                           
                         is the median node number, v
                        
                           j
                         is the weight of node j and 
                           d
                           (
                           
                              
                                 N
                              
                              
                                 k
                              
                           
                           ,
                           j
                           )
                         is defined as:
                           
                              (10)
                              
                                 d
                                 (
                                 
                                    
                                       N
                                    
                                    
                                       k
                                    
                                 
                                 ,
                                 j
                                 )
                                 =
                                 
                                 min
                                 
                                 [
                                 d
                                 (
                                 
                                    i
                                    ′
                                 
                                 ,
                                 j
                                 )
                                 ]
                                 :
                                 (
                                 
                                    i
                                    ′
                                 
                                 ∈
                                 
                                    
                                       N
                                    
                                    
                                       k
                                    
                                 
                                 )
                              
                           
                        let i′ be the node of N
                        
                           k
                         which produces the minimum value for Eq. (10), then we say the node j is allocated to i′. A shortest route tree can be rooted from each node to obtain the shortest distance between this node and the remaining nodes [5].

Generally optimization of the k-median problem is implemented with discrete variables, with variables being the nodal number of medians. If we consider the nodal number as the variables; firstly the number of meshes in finite element will be high and therefore the search space becomes very large, secondly implementation of the algorithm with discrete variables is more difficult. For overcoming these problems, we plotted the graph in the Cartesian coordinate system and used the coordinates of each node. The near coordinates of medians considered as the variables of the optimization algorithm. Then, the nearest nodes from these coordinates are selected as the medians of the graph. Therefore, in this work the proposed optimization algorithm considered with continuous variables and the number of variables in optimization algorithm is 2⁎k. The simple flowchart of this method is illustrated in 
                        Fig. 3.

As mentioned before, the CBO is a recently developed meta-heuristic algorithm which its formulation driven from the one-dimension collision laws between two bodies; in which one object collides with other object and after collision, objects move in concordance with the principle of conservation of energy. In this algorithm the mass of each object is related to the inverse of its fitness. According to the conservation of energy, after collision the heavier object moves less than the lighter one and the change of its mass is smaller [19].

In the CBO each solution candidate 
                        
                           
                              X
                           
                           
                              i
                           
                        
                      containing a number of variables (i.e. 
                        
                           
                              X
                           
                           
                              i
                           
                        
                        =
                        
                           {
                           
                              
                                 
                                    X
                                 
                                 
                                    i
                                    ,
                                    j
                                 
                              
                           
                           }
                        
                     ) is considered as a colliding body (CB). The massed objects are composed of two main equal groups; the stationary and moving objects, where the moving objects move to follow stationary objects and a collision occurs between pairs of such objects. This is done for two purposes: (i) to improve the positions of moving objects; (ii) to push stationary objects towards better positions. After the collision, the new positions of the colliding bodies are updated based on the new velocity by using the collision laws.

The CBO procedure can briefly be outlined as follows:
                        
                           1)
                           The initial positions of CBs are determined with random initialization of a population of individuals in the search space:
                                 
                                    (11)
                                    
                                       
                                          
                                             x
                                          
                                          
                                             i
                                          
                                          
                                             0
                                          
                                       
                                       =
                                       
                                          
                                             x
                                          
                                          
                                             min
                                          
                                       
                                       +
                                       r
                                       a
                                       n
                                       d
                                       (
                                       
                                          
                                             x
                                          
                                          
                                             max
                                          
                                       
                                       −
                                       
                                          
                                             x
                                          
                                          
                                             min
                                          
                                       
                                       )
                                       ,
                                       
                                       i
                                       =
                                       1
                                       ,
                                       2
                                       ,
                                       ..
                                       .
                                       ,
                                       n
                                       ,
                                    
                                 
                              where, 
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                    
                                       0
                                    
                                 
                               determines the initial value vector of the i th CB. 
                                 
                                    
                                       x
                                    
                                    
                                       min
                                    
                                 
                               and 
                                 
                                    
                                       x
                                    
                                    
                                       max
                                    
                                 
                               are the minimum and the maximum allowable values vectors of variables; rand is a random number in the interval [0,1]; and n is the number of CBs.

The magnitude of the body mass for each CB is defined as:
                                 
                                    (12)
                                    
                                       
                                          
                                             m
                                          
                                          
                                             k
                                          
                                       
                                       =
                                       
                                          1
                                          
                                             f
                                             i
                                             t
                                             (
                                             k
                                             )
                                          
                                       
                                       ,
                                       
                                       k
                                       =
                                       1
                                       ,
                                       2
                                       ,
                                       …
                                       ,
                                       n
                                    
                                 
                              where fit(i) represents the objective function value of the agent i; n is the population size. Obviously a CB with good values exerts a larger mass than the bad ones.

The arrangement of the CBs objective function values is performed in ascending order, (
                              Fig. 4(a)). The sorted CBs are equally divided into two groups:
                                 
                                    •
                                    The lower half of CBs (stationary CBs); These CBs are good agents which are stationary and the velocity of these bodies before collision is zero. Thus:
                                          
                                             (13)
                                             
                                                
                                                   
                                                      v
                                                   
                                                   
                                                      i
                                                   
                                                
                                                =
                                                0
                                                ,
                                                
                                                i
                                                =
                                                1
                                                ,
                                                ..
                                                .
                                                ,
                                                
                                                   n
                                                   2
                                                
                                             
                                          
                                       
                                    

The upper half of CBs (moving CBs): These CBs move toward the lower half. Then, according to Fig. 4(b), the better and worse CBs, i.e. agents with upper fitness value of each group will collide together. The change of the body position represents the velocity of these bodies before collision as:

After the collision, the velocity of bodies in each group is evaluated using the collision laws and the velocities before collision. The velocity of each moving CB after the collision is:
                                 
                                    (15)
                                    
                                       
                                          
                                             v
                                          
                                          
                                             i
                                          
                                          
                                             ׳
                                          
                                       
                                       =
                                       
                                          
                                             (
                                             
                                                
                                                   m
                                                
                                                
                                                   i
                                                
                                             
                                             −
                                             ε
                                             
                                                
                                                   m
                                                
                                                
                                                   i
                                                   −
                                                   
                                                      n
                                                      2
                                                   
                                                
                                             
                                             )
                                             
                                                
                                                   v
                                                
                                                
                                                   i
                                                
                                             
                                          
                                          
                                             
                                                
                                                   m
                                                
                                                
                                                   i
                                                
                                             
                                             +
                                             
                                                
                                                   m
                                                
                                                
                                                   i
                                                   −
                                                   
                                                      n
                                                      2
                                                   
                                                
                                             
                                          
                                       
                                       ,
                                       
                                       i
                                       =
                                       
                                          n
                                          2
                                       
                                       +
                                       1
                                       ,
                                       ..
                                       .
                                       ,
                                       n
                                    
                                 
                              where, 
                                 
                                    
                                       v
                                    
                                    
                                       i
                                    
                                 
                              and 
                                 
                                    
                                       v
                                    
                                    
                                       i
                                    
                                    
                                       ׳
                                    
                                 
                               are the velocity of the ith moving CB before and after the collision, respectively; 
                                 
                                    
                                       m
                                    
                                    
                                       i
                                    
                                 
                               is the mass of the ith CB; 
                                 
                                    
                                       m
                                    
                                    
                                       i
                                       −
                                       
                                          n
                                          2
                                       
                                    
                                 
                               is mass of the ith CB pair. Also, the velocity of each stationary CB after the collision is:
                                 
                                    (16)
                                    
                                       
                                          
                                             v
                                          
                                          
                                             i
                                          
                                          
                                             ׳
                                          
                                       
                                       =
                                       
                                          
                                             (
                                             
                                                
                                                   m
                                                
                                                
                                                   i
                                                   +
                                                   
                                                      n
                                                      2
                                                   
                                                
                                             
                                             +
                                             ε
                                             
                                                
                                                   m
                                                
                                                
                                                   i
                                                   +
                                                   
                                                      n
                                                      2
                                                   
                                                
                                             
                                             )
                                             
                                                
                                                   v
                                                
                                                
                                                   i
                                                   +
                                                   
                                                      n
                                                      2
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                   m
                                                
                                                
                                                   i
                                                
                                             
                                             +
                                             
                                                
                                                   m
                                                
                                                
                                                   i
                                                   +
                                                   
                                                      n
                                                      2
                                                   
                                                
                                             
                                          
                                       
                                       ,
                                       
                                       i
                                       =
                                       1
                                       ,
                                       ..
                                       .
                                       ,
                                       
                                          n
                                          2
                                       
                                    
                                 
                              where 
                                 
                                    
                                       v
                                    
                                    
                                       i
                                       +
                                       
                                          n
                                          2
                                       
                                    
                                 
                               and 
                                 
                                    
                                       v
                                    
                                    
                                       i
                                    
                                    
                                       ׳
                                    
                                 
                               are the velocity of the ith moving CB pair before and the ith stationary CB after the collision, respectively; 
                                 
                                    
                                       m
                                    
                                    
                                       i
                                    
                                 
                               is mass of the ith CB; 
                                 
                                    
                                       m
                                    
                                    
                                       i
                                       +
                                       
                                          n
                                          2
                                       
                                    
                                 
                               is mass of the ith moving CB pair. 
                                 ε
                               is the coefficient of restitution (COR) and for most of the real objects, its value is between 0 and 1. It is defined as the ratio of the separation velocity of two agents after collision to the approach velocity of two agents before collision. In the present algorithm, this index is used to control of the exploration and exploitation rate. For this goal, the COR is decreases linearly from unity to zero. Thus, 
                                 ε
                               is defined as:
                                 
                                    (17)
                                    
                                       ε
                                       =
                                       1
                                       −
                                       
                                          
                                             i
                                             t
                                             e
                                             r
                                          
                                          
                                             i
                                             t
                                             e
                                             
                                                
                                                   r
                                                
                                                
                                                   max
                                                
                                             
                                          
                                       
                                    
                                 
                              where iter is the actual iteration number and iter
                              
                                 max
                               is the maximum number of iterations, with COR being equal to unit and zero representing the global and local search, respectively [18].

New positions of CBs are obtained using the generated velocities after the collision in position of stationary CBs.

The new positions of each moving CB is:
                                 
                                    (18)
                                    
                                       
                                          
                                             x
                                          
                                          
                                             i
                                          
                                          
                                             n
                                             e
                                             w
                                          
                                       
                                       =
                                       
                                          
                                             x
                                          
                                          
                                             i
                                             −
                                             
                                                n
                                                2
                                             
                                          
                                       
                                       +
                                       r
                                       a
                                       n
                                       d
                                       ∘
                                       
                                          
                                             v
                                          
                                          
                                             i
                                          
                                          
                                             ׳
                                          
                                       
                                       ,
                                       
                                       i
                                       =
                                       
                                          n
                                          2
                                       
                                       +
                                       1
                                       ,
                                       ..
                                       .
                                       ,
                                       n
                                    
                                 
                              where, 
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                    
                                       n
                                       e
                                       w
                                    
                                 
                               and 
                                 
                                    
                                       v
                                    
                                    
                                       i
                                    
                                    
                                       ׳
                                    
                                 
                               are the new position and the velocity after the collision of the ith moving CB, respectively; 
                                 
                                    
                                       x
                                    
                                    
                                       i
                                       −
                                       
                                          n
                                          2
                                       
                                    
                                 
                               is the old position of the ith stationary CB pair. Also, the new positions of stationary CBs are obtained by:
                                 
                                    (19)
                                    
                                       
                                          
                                             x
                                          
                                          
                                             i
                                          
                                          
                                             n
                                             e
                                             w
                                          
                                       
                                       =
                                       
                                          
                                             x
                                          
                                          
                                             i
                                          
                                       
                                       +
                                       r
                                       a
                                       n
                                       d
                                       ∘
                                       
                                          
                                             v
                                          
                                          
                                             i
                                          
                                          
                                             ׳
                                          
                                       
                                       ,
                                       
                                       i
                                       =
                                       1
                                       ,
                                       ..
                                       .
                                       ,
                                       
                                          n
                                          2
                                       
                                    
                                 
                              where, 
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                    
                                       n
                                       e
                                       w
                                    
                                 
                              , 
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                 
                               and 
                                 
                                    
                                       v
                                    
                                    
                                       i
                                    
                                    
                                       ׳
                                    
                                 
                               are the new position, old position and the velocity after the collision of the ith stationary CB, respectively. rand is a random vector uniformly distributed in the range (−1,1) and the sign “
                                 ∘
                              ” denotes an element-by-element multiplication.

The optimization is repeated from Step 2 until a termination criterion, specified as the maximum number of iteration, is satisfied. It should be noted that, the status of a body (stationary or moving body) and its numbering are changed in subsequent two iterations.

Apart from the efficiency of the CBO algorithm, which is illustrated in the subsequent section through numerical examples, the proposed algorithm does not include internal parameters besides the coefficient of restitution (COR). The linear variation law adopted for COR makes the proposed algorithm a parameter independent optimization technique. This is a definite strength of the CBO.

In this section four numerical examples are studied. The topological properties of the finite element models are transferred to the connectivity properties of graphs, by the clique graphs (as defined in Section 2.1). In all of these examples the weights of all the edges and the demands of all nodes are taken as unity and the FE meshes has been considered the four nodes rectangular meshes.

In order to compare with available meta-heuristic algorithms, all of examples are solved also using the particle swarm optimization (PSO) developed by Kennedy and Eberhart [21] in order to provide some comparison. In these examples, the number of agents is set to 20 individuals. The maximum number of iterations is also considered as 200. Comparisons are made through the cost of k-median problem and computational time as well as in the convergence curve. Capability and robustness of two algorithms are investigated for four different finite elements. The optimization process is performed by a Core™ 2 Duo 2.53GHz computer and the time of all computations is evaluated in clock time.

A rectangular FEM for a rectangular plate, as shown in 
                        Fig. 5, is considered as the first example. The numbers of medians considered in this example are set to k={3, 4, 5 and 6}. As can be seen from Fig. 5, the number of meshes is set as 2601 (
                           51
                           ×
                           51
                        ). The performance of the algorithms is tested on this model, and the results are depicted in 
                        Table 1. 
                        Fig. 6 shows the optimal subdomains of the FEM with different colors for the different values of k. The evolution processes of the best fitness value obtained by two algorithms for k=6 are also shown in 
                        Fig. 7.


                        
                        Fig. 8 shows a FEM for H-shaped section with 4949 meshes for this example. In this example, the numbers of medians considered set as k={5 and 10}. Table 1 represents the results obtained using both methods for different values of k. 
                        Fig. 9 shows the optimal subdomains obtained using the CBO algorithm for different values of k. 
                        Fig. 10 shows the convergence curves obtained using PSO and CBO algorithms for k=10.

A FEM of a rectangular plate with four opening consisting 760 meshes, as shown in 
                        Fig. 11, is considered for this example. The numbers of medians considered in this example are set as k={5 and 10}. The performance of both algorithms is tested on this model, and the results are depicted in Table 1. 
                        
                        Figs. 12 and 13 show the optimal subdomains obtained using the CBO algorithm for different value of k by CBO and the convergence curves of the best result obtained for this example, respectively.

In the last example, the FEM of a circular plate with 2400 elements and one opening is considered, 
                        Fig. 14. The numbers of medians considered in this example are set as k={5 and 6}. Similar to the previous examples, the performance of both algorithms is tested on this model, and the results are depicted in Table 1. 
                        
                        Figs. 15 and 16 show the optimal subdomains obtained using the CBO algorithm for different values of k and the convergence curves of the best result obtained for this example, respectively.

As can be seen from Figs. 6, 9, 12 and 15, the problem of finding the median of each FEM is achieved using the proposed method. The optimal subdomains contain approximately equal numbers of meshes and have also good aspect ratios for balancing the computational load between processors.


                        Table 1 compares the results obtained using the CBO algorithm with the outcome of the PSO algorithm for all examples. It can be seen from this table, the best costs and the CPU time obtained by CBO are better than the PSO algorithm with the same number of function evaluation. 
                        Fig. 17 compares also the computational time for the different number of subdomain in the first example using both algorithms.

It can be seen from Figs. 7, 10, 13 and 16 that though the PSO is considerably faster in the early optimization iterations, CBO converged to a significantly better design without being trapped in local optima.

An efficient domain decomposer is proposed for finite element meshes, based on Colliding Bodies Optimization (CBO) and k-median method. The CBO mimics the laws of collision between objects. The very simple implementation, and parameter independency are definite strength points of CBO. In order to finding the optimal subdomains, a clique graph is used to transform the connectivity properties of FE meshes into those of graphs. Then, the medians of graph are selected based on optimization algorithm with continues variables.

The validity and efficiency of the proposed method are shown through four test problems. The results of the proposed algorithm are compared to those of the best-known standard Particle Swarm Optimization algorithm. The outcome is that the CBO algorithm clearly outperforms the PSO algorithm with a smaller computational time.

@&#ACKNOWLEDGEMENTS@&#

The first author is grateful to the Iran National Science Foundation for the support.

@&#REFERENCES@&#

